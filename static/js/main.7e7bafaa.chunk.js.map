{"version":3,"sources":["modules/rules/assets/images/classical_board.png","modules/rules/assets/images/cross_out_horizontal.png","modules/rules/assets/images/cross_out_horizontal_with_zeros.png","modules/rules/assets/images/cross_out_horizontal_with_zeros_next_line.png","modules/rules/assets/images/cross_out_vertical.png","modules/rules/assets/images/cross_out_vertical_with_zeros.png","modules/rules/assets/images/next_level.png","modules/game/GameField.ts","modules/game/ClassicalGameField.ts","modules/game/CellIndex.ts","modules/game/RandomGameField.ts","modules/game/stores/GameStore.ts","modules/game/link/stores/GameLinkFormStore.ts","modules/router/stores/RouterStore.ts","modules/router/stores/RootStore.ts","modules/home/components/HomeComponent.tsx","modules/rules/components/RulesComponent.tsx","modules/game/components/GameCellComponent.tsx","modules/game/components/GameFieldComponent.tsx","modules/game/components/GameComponent.tsx","modules/game/containers/GameContainer.tsx","modules/game/link/components/GameLinkForm.tsx","modules/router/components/RouterComponent.tsx","modules/router/containers/RouterContainer.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","GameField","this","set","clear","init","newCells","_this$cells","cells","splice","apply","size","concat","Object","toConsumableArray","cellIndex","serial","rowSize","cellIndex1","cellIndex2","undefined","cellsMatch","areNeighbors","serial1","serial2","neighborsSerials","indexOf","_this","neighbors","forEach","offset","potentialNeighborSerialIndex","push","n1","cell","n2","numbersMatch","radix","_this$cells2","positiveNumbers","filter","n","_this2","rowsToRemove","i","slice","every","reverse","_rowSize","_initialSize","_radix","length","RADIX_MIN","RADIX_MAX","RADIX_DEFAULT","ROW_SIZE_MIN","ROW_SIZE_MAX","INITIAL_SIZE_MIN","INITIAL_SIZE_MAX","observable","ROW_SIZE_DEFAULT","INITIAL_SIZE_DEFAULT","computed","action","ClassicalGameField","arguments","initialSize","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","digitChars","toString","split","digits","map","digit","parseInt","CellIndex","row","col","_row","_col","Math","floor","RandomGameField","seed","randomGenerator","seedrandom","randomCell","max","abs","int32","GameStore","initializerDefineProperty","GameStore_descriptor","GameStore_descriptor2","GameStore_descriptor3","GameStore_descriptor4","_field","_descriptor5","_descriptor6","_descriptor7","_descriptor8","field","autorun","reset","clickedCellIndex","clickedCell","Error","previousSelectedCellIndex","_","canBeCrossedOut","crossOut","removeZeroRows","recordFieldInHistory","crossoutsMade","positionInHistory","setFieldFromHistory","history","copyPositiveCells","resetHistory","INITIAL_CROSSOUTS_MADE","_this$history","INITIAL_POSITION_IN_HISTORY","result","sliceStart","sliceEnd","min","INITIAL_HISTORY","GameLinkFormStore","GameLinkFormStore_descriptor","GameLinkFormStore_descriptor2","GameLinkFormStore_descriptor3","GameLinkFormStore_descriptor4","GAME_URL_PREFIX","RouterStore","gameLinkFormStore","RootStore","gameStore","routerStore","HomeComponent","react","RulesComponent","className","id","href","data-spy","data-target","src","classical_board","alt","cross_out_horizontal","cross_out_horizontal_with_zeros","cross_out_horizontal_with_zeros_next_line","cross_out_vertical","cross_out_vertical_with_zeros","next_level","GameCellComponent","_this$props","props","selected","crossedOut","onClick","value","buttonClasses","type","join","disabled","Component","GameFieldComponent","rows","rowIndex","rowSelected","previousSelectedNumberRow","key","theNumber","colIndex","previousSelectedNumberCol","components_GameCellComponent","onCellClick","React","GameComponent","inject","observer","role","store","undo","canUndo","redo","canRedo","nextLevel","components_GameFieldComponent","handleCellClick","esm_get","prototype","observe","scoreText","$","hasClass","addClass","removeClass","GameContainer","index_module","components_GameComponent","prevProps","prevState","snapshot","updateGameStoreToMatchUrl","_this$props$match$par","match","params","rootStore","GameLinkForm","handleRadixChange","e","target","handleRowSizeChange","handleInitialSizeChange","handleSeedChange","htmlFor","placeholder","aria-label","onChange","Link","to","gameUrl","RouterComponent","BrowserRouter","basename","data-toggle","aria-controls","aria-expanded","aria-haspopup","GameLinkForm_GameLinkForm","Route","path","exact","component","RouterContainer","components_RouterComponent","root","document","getElementById","rootElement","RouterContainer_RouterContainer","ReactDOM"],"mappings":"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","file":"static/js/main.7e7bafaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/classical_board.55e6cbd9.png\";","module.exports = __webpack_public_path__ + \"static/media/cross_out_horizontal.bdebbf05.png\";","module.exports = __webpack_public_path__ + \"static/media/cross_out_horizontal_with_zeros.40baaec5.png\";","module.exports = __webpack_public_path__ + \"static/media/cross_out_horizontal_with_zeros_next_line.12165542.png\";","module.exports = __webpack_public_path__ + \"static/media/cross_out_vertical.70338c3c.png\";","module.exports = __webpack_public_path__ + \"static/media/cross_out_vertical_with_zeros.7fd132f5.png\";","module.exports = __webpack_public_path__ + \"static/media/next_level.11064122.png\";","import CellIndex from \"./CellIndex\";\nimport {action, computed, observable} from \"mobx\";\n\nexport default abstract class GameField {\n  public static readonly RADIX_MIN = 4\n  public static readonly RADIX_MAX = 32\n  public static readonly RADIX_DEFAULT = 10\n\n  public static readonly ROW_SIZE_MIN = 4\n  public static readonly ROW_SIZE_MAX = 32\n  public static ROW_SIZE_DEFAULT(radix: number) {\n    return radix - 1\n  }\n\n  public static readonly INITIAL_SIZE_MIN = 1\n  public static readonly INITIAL_SIZE_MAX = 99\n  public static INITIAL_SIZE_DEFAULT(rowSize: number) {\n    return rowSize * 3\n  }\n\n  @observable\n  public cells: number[] = []\n\n  @observable\n  protected _radix: number = GameField.RADIX_DEFAULT\n\n  @observable\n  protected _rowSize: number = GameField.ROW_SIZE_DEFAULT(this._radix)\n\n  @observable\n  protected _initialSize: number = GameField.INITIAL_SIZE_DEFAULT(this._rowSize)\n\n  @computed\n  get rowSize(): number {\n    return this._rowSize;\n  }\n\n  @computed\n  get initialSize(): number {\n    return this._initialSize\n  }\n\n  @computed\n  get radix(): number {\n    return this._radix;\n  }\n\n  public abstract init(): void\n\n  @computed\n  get size(): number {\n    return this.cells.length;\n  }\n\n  @action\n  public clear() {\n    this.set([])\n  }\n\n  @action\n  public reset() {\n    this.clear()\n    this.init()\n  }\n\n  @action\n  public set(newCells: number[]) {\n    this.cells.splice(0, this.size, ...newCells)\n  }\n\n  public crossOut(cellIndex: CellIndex): void {\n    this.cells[cellIndex.serial(this.rowSize)] = 0\n  }\n\n  public canBeCrossedOut(cellIndex1?: CellIndex, cellIndex2?: CellIndex): boolean {\n    return (\n      cellIndex1 !== undefined &&\n      cellIndex2 !== undefined &&\n      this.cellsMatch(cellIndex1, cellIndex2) &&\n      this.areNeighbors(cellIndex1, cellIndex2)\n    )\n  }\n\n  public areNeighbors(cellIndex1: CellIndex, cellIndex2: CellIndex): boolean {\n    const serial1 = cellIndex1.serial(this.rowSize)\n    const serial2 = cellIndex2.serial(this.rowSize)\n    return this.neighborsSerials(serial1).indexOf(serial2) >= 0\n  }\n\n  protected neighborsSerials(serial: number): number[] {\n    const neighbors: number[] = []\n    const offsets = [-this.rowSize, -1, +1, +this.rowSize]\n    offsets.forEach(offset => {\n      let potentialNeighborSerialIndex = serial\n      while (true) {\n        potentialNeighborSerialIndex += offset\n        if (potentialNeighborSerialIndex < 0 || potentialNeighborSerialIndex >= this.size) {\n          break\n        }\n        if (this.cells[potentialNeighborSerialIndex] !== 0) {\n          neighbors.push(potentialNeighborSerialIndex)\n          break\n        }\n      }\n    })\n    return neighbors\n  }\n\n  public cellsMatch(cellIndex1: CellIndex, cellIndex2: CellIndex): boolean {\n    const n1 = this.cell(cellIndex1)\n    const n2 = this.cell(cellIndex2)\n    return (\n      n1 !== undefined &&\n      n2 !== undefined &&\n      this.numbersMatch(n1, n2)\n    )\n  }\n\n  public numbersMatch(n1: number, n2: number): boolean {\n    return (\n      n1 === n2 ||\n      n1 + n2 === this.radix\n    )\n  }\n\n  public cell(cellIndex: CellIndex): number | undefined {\n    return this.cells[cellIndex.serial(this.rowSize)]\n  }\n\n  @action\n  public copyPositiveCells() {\n    const positiveNumbers = this.cells.filter((n) => n > 0);\n    this.cells = this.cells.concat(...positiveNumbers);\n  }\n\n  @action\n  public removeZeroRows() {\n    const rowsToRemove: number[] = [];\n    for (let i = 0; i < this.size - this.rowSize; i += this.rowSize) {\n      const row = this.cells.slice(i, i + this.rowSize);\n      if (row.every((n) => n === 0)) {\n        rowsToRemove.push(i);\n      }\n    }\n\n    rowsToRemove.reverse().forEach((i) => {\n      this.cells.splice(i, this.rowSize);\n    });\n  }\n}\n","import GameField from \"./GameField\";\nimport {action} from \"mobx\";\n\nexport default class ClassicalGameField extends GameField {\n  public constructor(\n    radix: number = GameField.RADIX_DEFAULT,\n    rowSize: number = GameField.ROW_SIZE_DEFAULT(radix),\n    initialSize: number = GameField.INITIAL_SIZE_DEFAULT(rowSize),\n  ) {\n    super();\n    this._radix = radix\n    this._rowSize = rowSize\n    this._initialSize = initialSize\n  }\n\n  @action\n  public init() {\n    for (let i = 1; ; ++i) {\n      if (this.size >= this.initialSize) {\n        if (this.size > this.initialSize) {\n          this.cells.splice(this.initialSize) // cut extra\n        }\n        break\n      }\n      const digitChars = i.toString(this.radix).split('')\n      if (digitChars.indexOf('0') !== -1) {\n        continue\n      }\n      const digits: number[] = digitChars.map((digit) => parseInt(digit, this.radix))\n      this.cells.push(...digits)\n    }\n  }\n}\n","export default class CellIndex {\n  private readonly _row: number\n\n  private readonly _col: number\n\n  public constructor(row: number, col: number) {\n    this._row = row\n    this._col = col\n  }\n\n  public get row(): number {\n    return this._row\n  }\n\n  public get col(): number {\n    return this._col\n  }\n\n  public static fromSerial(serial: number, rowSize: number): CellIndex {\n    const row = Math.floor(serial / rowSize)\n    const col = serial - row * rowSize\n    return new CellIndex(row, col)\n  }\n\n  public serial(rowSize: number): number {\n    return this.row * rowSize + this.col\n  }\n}\n","import GameField from \"./GameField\";\nimport {prng} from \"seedrandom\";\nimport * as seedrandom from \"seedrandom\";\nimport {action} from \"mobx\";\n\nexport default class RandomGameField extends GameField {\n  public readonly seed: string\n  private randomGenerator: prng\n\n  public constructor(\n    radix: number = GameField.RADIX_DEFAULT,\n    rowSize: number = GameField.ROW_SIZE_DEFAULT(radix),\n    initialSize: number = GameField.INITIAL_SIZE_DEFAULT(rowSize),\n    seed: string,\n  ) {\n    super();\n    this._rowSize = rowSize\n    this._initialSize = initialSize\n    this._radix = radix\n    this.seed = seed\n    this.randomGenerator = seedrandom.alea(this.seed)\n  }\n\n  @action\n  public init() {\n    this.randomGenerator = seedrandom.alea(this.seed)\n    for (let i = 0; i < this.initialSize; ++i) {\n      this.cells.push(this.randomCell)\n      if (this.size === this.initialSize) {\n        break\n      }\n    }\n  }\n\n  private get randomCell(): number {\n    const min = 1\n    const max = this.radix - 1\n    return (Math.abs(this.randomGenerator.int32()) % max) + min\n  }\n}\n","import {action, autorun, computed, observable} from \"mobx\";\nimport GameField from \"../GameField\";\nimport ClassicalGameField from \"../ClassicalGameField\";\nimport CellIndex from \"../CellIndex\";\nimport * as _ from \"lodash\";\nimport RandomGameField from \"../RandomGameField\";\n\nclass GameStore {\n  public static readonly INITIAL_HISTORY = []\n\n  public static readonly INITIAL_POSITION_IN_HISTORY = 0\n\n  public static readonly INITIAL_CROSSOUTS_MADE = 0\n\n  @observable\n  public rowSize: number\n\n  @observable\n  public radix: number\n\n  @observable\n  public seed?: string\n\n  @observable\n  public initialSize: number\n\n  private _field: GameField\n\n  @observable\n  public history: number[][] = GameStore.INITIAL_HISTORY\n\n  @observable\n  public positionInHistory: number = GameStore.INITIAL_POSITION_IN_HISTORY\n\n  @observable\n  public previousSelectedCellIndex?: CellIndex\n\n  @observable\n  public crossoutsMade: number = GameStore.INITIAL_CROSSOUTS_MADE\n\n  public constructor(radix: number = 10,\n                     rowSize: number = radix - 1,\n                     initialSize: number = rowSize * 3,\n                     seed?: string) {\n    this.radix = radix\n    this.rowSize = rowSize\n    this.initialSize = initialSize\n    this.seed = seed\n    this._field = this.field\n    autorun(() => this.field.reset())\n  }\n\n  @computed\n  public get field(): GameField {\n    let field: GameField\n    if (this.seed === undefined) {\n      field = new ClassicalGameField(this.radix, this.rowSize, this.initialSize)\n    } else {\n      field = new RandomGameField(this.radix, this.rowSize, this.initialSize, this.seed)\n    }\n    return field\n  }\n\n  @computed\n  public get cells() {\n    return this.field.cells\n  }\n\n  // @observable\n  // public field: GameField = new ClassicalGameField(this.rowSize, this.radix)\n\n  // comment out because otherwise doesn't update on changes\n  @computed\n  public get rows(): number[][] {\n    const result = [];\n    for (let sliceStart = 0; sliceStart < this.field.size; sliceStart += this.field.rowSize) {\n      const sliceEnd = Math.min(sliceStart + this.field.rowSize, this.field.size);\n      result.push(this.cells.slice(sliceStart, sliceEnd));\n    }\n    return result;\n  }\n\n  @computed\n  public get previousSelectedCell() {\n    return (\n      this.previousSelectedCellIndex &&\n      this.field.cell(this.previousSelectedCellIndex)\n    )\n  }\n\n  @computed\n  public get previousSelectedNumberRow() {\n    return (\n      this.previousSelectedCellIndex &&\n      this.previousSelectedCellIndex.row\n    )\n  }\n\n  @computed\n  public get previousSelectedNumberCol() {\n    return (\n      this.previousSelectedCellIndex &&\n      this.previousSelectedCellIndex.col\n    )\n  }\n\n  @action\n  public handleCellClick(row: number, col: number) {\n    const clickedCellIndex = new CellIndex(row, col);\n    const clickedCell = this.field.cell(clickedCellIndex);\n\n    if (clickedCell === 0) {\n      return\n    }\n\n    if (!clickedCell || clickedCell < 0 || clickedCell >= this.radix) {\n      throw Error(`Unexpected number ${clickedCell}`);\n    }\n\n    if (this.previousSelectedCellIndex === undefined) {\n      this.previousSelectedCellIndex = clickedCellIndex;\n      return;\n    }\n\n    if (_.isEqual(this.previousSelectedCellIndex, clickedCellIndex)) {\n      this.previousSelectedCellIndex = undefined;\n      return;\n    }\n\n    if (!this.field.canBeCrossedOut(this.previousSelectedCellIndex, clickedCellIndex)) {\n      this.previousSelectedCellIndex = clickedCellIndex\n      return\n    }\n\n    this.crossOut(this.previousSelectedCellIndex, clickedCellIndex);\n  }\n\n  @action\n  private crossOut(cellIndex1: CellIndex, cellIndex2: CellIndex) {\n    this.field.crossOut(cellIndex1)\n    this.field.crossOut(cellIndex2)\n    this.previousSelectedCellIndex = undefined\n    this.field.removeZeroRows()\n    this.recordFieldInHistory()\n    this.crossoutsMade++\n  }\n\n  @computed\n  public get canUndo() {\n    return this.positionInHistory > 0;\n  }\n\n  @action\n  public undo() {\n    this.positionInHistory--\n    this.setFieldFromHistory(this.positionInHistory)\n    this.crossoutsMade--\n  }\n\n  @computed\n  public get canRedo() {\n    return this.positionInHistory < this.history.length - 1\n  }\n\n  @action\n  public redo() {\n    this.positionInHistory++\n    this.setFieldFromHistory(this.positionInHistory)\n    this.crossoutsMade++\n  }\n\n  @action\n  private setFieldFromHistory(positionInHistory: number) {\n    this.field.set(this.history[positionInHistory])\n  }\n\n  @action\n  public nextLevel() {\n    this.field.copyPositiveCells()\n    this.resetHistory()\n  }\n\n  @action\n  public reset() {\n    this.field.reset()\n    this.resetHistory()\n    this.crossoutsMade = GameStore.INITIAL_CROSSOUTS_MADE\n  }\n\n  @action\n  private recordFieldInHistory() {\n    this.history.splice(this.positionInHistory + 1, this.history.length, ...[[...this.field.cells]]);\n    this.positionInHistory++;\n  }\n\n  @action\n  private resetHistory() {\n    this.history = [[...this.field.cells]]\n    this.positionInHistory = GameStore.INITIAL_POSITION_IN_HISTORY\n  }\n}\n\nexport default GameStore\n","import {computed, observable} from \"mobx\";\n\nimport GameField from \"../../GameField\";\n\nexport default class GameLinkFormStore {\n  public static readonly GAME_URL_PREFIX = '/game'\n\n  @observable\n  public radix: number\n\n  @observable\n  public rowSize: number\n\n  @observable\n  public initialSize: number\n\n  @observable\n  public seed: string\n\n  public constructor(\n    radix: number = GameField.RADIX_DEFAULT,\n    rowSize: number = GameField.ROW_SIZE_DEFAULT(radix),\n    initialSize: number = GameField.INITIAL_SIZE_DEFAULT(rowSize),\n    seed: string = '',\n  ) {\n    this.radix = radix\n    this.rowSize = rowSize\n    this.initialSize = initialSize\n    this.seed = seed\n  }\n\n  @computed\n  public get gameUrl(): string {\n    return (\n      `${GameLinkFormStore.GAME_URL_PREFIX}` +\n      `/radix/${this.radix}` +\n      `/row/${this.rowSize}` +\n      `/size/${this.initialSize}` +\n      `${this.seed && '/seed/' + this.seed}/`\n    )\n  }\n}\n","import GameLinkFormStore from \"../../game/link/stores/GameLinkFormStore\";\n\nexport default class RouterStore {\n  public gameLinkFormStore = new GameLinkFormStore()\n}\n","import GameStore from \"../../game/stores/GameStore\";\nimport RouterStore from \"./RouterStore\";\n\nclass RootStore {\n  public gameStore: GameStore = new GameStore()\n  public routerStore: RouterStore = new RouterStore()\n}\n\nexport default RootStore\n","import * as React from \"react\";\n\nconst HomeComponent = () => (\n  <div>\n    This is a home page :)\n  </div>\n);\n\nexport default HomeComponent;\n","import * as React from \"react\";\nimport classical_board from \"../assets/images/classical_board.png\";\nimport cross_out_horizontal from \"../assets/images/cross_out_horizontal.png\";\nimport cross_out_horizontal_with_zeros from \"../assets/images/cross_out_horizontal_with_zeros.png\";\nimport cross_out_horizontal_with_zeros_next_line from \"../assets/images/cross_out_horizontal_with_zeros_next_line.png\";\nimport cross_out_vertical from \"../assets/images/cross_out_vertical.png\";\nimport cross_out_vertical_with_zeros from \"../assets/images/cross_out_vertical_with_zeros.png\";\nimport next_level from \"../assets/images/next_level.png\";\n\nconst RulesComponent = () => (\n  <div className=\"row\">\n    <div className=\"rulesNavContainer col-3 sticky-top\">\n      <nav id=\"rulesNav\" className=\"navbar navbar-light sticky-top\">\n        <nav className=\"navbar-nav flex-column\">\n          <a className=\"nav-link\" href=\"#gameRules\">Game Rules</a>\n          <nav className=\"ml-3 navbar-nav nav flex-column\">\n            <a className=\"nav-link\" href=\"#board\">Board</a>\n            <a className=\"nav-link\" href=\"#goal\">Goal</a>\n            <a className=\"nav-link\" href=\"#howToCrossOut\">How To Crossout?</a>\n            <a className=\"nav-link\" href=\"#nextLevel\">Next Level</a>\n          </nav>\n        </nav>\n      </nav>\n    </div>\n    <div className=\"rulesContainer col\">\n      <div className=\"Rules\" data-spy=\"scroll\" data-target=\"#rulesNav\">\n        <section id=\"gameRules\" className=\"pt-4\">\n          <h2>Game rules</h2>\n        </section>\n\n        <section id=\"board\" className=\"mt-2\">\n          <h4>Board</h4>\n          <p>\n            The classical board looks like this:\n          </p>\n          <img src={classical_board}\n               alt=\"Classical Board\"\n               className=\"classical_board\"/>\n        </section>\n        <section id=\"goal\" className=\"mt-3\">\n          <h4>Goal</h4>\n          <p>\n            The goal is to cross out all the numbers, so that the game board is empty\n            and in as few crossouts as possible.\n          </p>\n        </section>\n        <section id=\"howToCrossOut\">\n          <h4>How to cross out?</h4>\n          <p>\n            In the classical game you have numbers from 1 to 9. You can cross out\n            pairs of numbers which sum up to 10, or are identical.\n          </p>\n          <p>\n            But there are some restrictions on that. You can cross out only those\n            pairs of numbers which are neighbors. For two numbers on the board to be\n            neighbors one of the following is required:\n          </p>\n          <ol>\n            <li>\n              They go one after another (from <b>left</b> to <b>right</b>,\n              from <b>top</b> to <b>bottom</b>):\n              <br/>\n              <img src={cross_out_horizontal}\n                   alt=\"Cross-out Horizontal\"\n                   className=\"cross_out_horizontal\"/>\n              <br/>\n              There can be any number of `zeros` between them:\n              <br/>\n              <img src={cross_out_horizontal_with_zeros}\n                   alt=\"Cross-out Horizontal With Zeros\"\n                   className=\"cross_out_horizontal_with_zeros\"/>\n              <br/>\n              The second one can even be one the next line:\n              <br/>\n              <img src={cross_out_horizontal_with_zeros_next_line}\n                   alt=\"Cross-out Horizontal With Zeros Next Line\"\n                   className=\"cross_out_horizontal_with_zeros_next_line\"/>\n            </li>\n            <li>\n              They lie vertically next to each other:<br/>\n              <img src={cross_out_vertical}\n                   alt=\"Cross-out Vertical\"\n                   className=\"cross_out_vertical\"/>\n              <br/>\n              There can be any number of `zeros` between them:\n              <br/>\n              <img src={cross_out_vertical_with_zeros}\n                   alt=\"Cross-out Vertical With Zeros\"\n                   className=\"cross_out_vertical_with_zeros\"/>\n            </li>\n          </ol>\n        </section>\n\n        <section id=\"nextLevel\">\n          <h4>Next level</h4>\n          <p>\n            In the most cases you can't win on the first level. When you can't find\n            any more pairs to cross out, just go to the next level\n            (click <span><img src={next_level} alt=\"Next Level\" className=\"next_level\"/></span>).\n\n            It will duplicate\n            all the numbers in the current board except `zeros` and place them to the\n            end of the board. Your history of moves will be lost and you can't go back\n            to the previous level anymore.\n          </p>\n        </section>\n      </div>\n    </div>\n  </div>\n);\n\nexport default RulesComponent;\n","import * as React from \"react\";\nimport {Component} from \"react\";\n\ninterface CellProps {\n  crossedOut: boolean;\n  selected: boolean;\n  onClick: () => void;\n  value: string;\n}\n\nclass GameCellComponent extends Component<CellProps> {\n  public render() {\n    const {selected, crossedOut, onClick, value} = this.props;\n    const buttonClasses = ['Cell'];\n    if (selected) {\n      buttonClasses.push('selected');\n    }\n    if (crossedOut) {\n      buttonClasses.push('crossedOut');\n    }\n    return (\n      <button type=\"button\"\n              className={buttonClasses.join(' ')}\n              onClick={onClick}\n              disabled={crossedOut}>\n        {value}\n      </button>\n    );\n  }\n}\n\nexport default GameCellComponent;\n","import * as React from \"react\";\n\nimport GameCellComponent from \"./GameCellComponent\";\n\ninterface GameFieldProps {\n  rows: number[][];\n  onCellClick: (row: number, col: number) => void;\n  previousSelectedNumberRow?: number;\n  previousSelectedNumberCol?: number;\n}\n\nclass GameFieldComponent extends React.Component<GameFieldProps> {\n  public render() {\n    return (\n      <div className=\"Board overflow-scroll\">\n        {this.props.rows.map((row, rowIndex) => {\n          const rowSelected = rowIndex === this.props.previousSelectedNumberRow;\n          return (\n            <div className=\"row flex-nowrap mx-0\" key={rowIndex}>\n              {row.map((theNumber, colIndex) => {\n                const selected = rowSelected && colIndex === this.props.previousSelectedNumberCol;\n                const crossedOut = !selected && theNumber === 0;\n                return (\n                  <div className=\"col-\" key={(rowIndex << 10) + colIndex}>\n                    <GameCellComponent onClick={() => this.props.onCellClick(rowIndex, colIndex)}\n                                       selected={selected}\n                                       crossedOut={crossedOut}\n                                       value={theNumber.toString()}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default GameFieldComponent;\n","import $ from \"jquery\";\nimport {observe} from \"mobx\";\nimport {inject, observer} from \"mobx-react\";\nimport * as React from \"react\";\n\nimport GameFieldComponent from \"./GameFieldComponent\";\nimport GameStore from \"../stores/GameStore\";\n\ninterface GameProps {\n  gameStore?: GameStore\n}\n\n@inject('gameStore')\n@observer\nclass GameComponent extends React.Component<GameProps> {\n  public render() {\n    return (\n      <div className=\"d-flex flex-column align-items-center\">\n        <div className=\"mt-2 sticky-top d-flex flex-column align-items-center\">\n          <div className=\"btn-group\" role=\"group\">\n            <button className=\"btn btn-control\"\n                    onClick={() => this.store.reset()}>\n              Reset\n            </button>\n            <button className=\"btn btn-control\"\n                    onClick={() => this.store.undo()}\n                    disabled={!this.store.canUndo}>\n              Undo\n            </button>\n            <button className=\"btn btn-control\"\n                    onClick={() => this.store.redo()}\n                    disabled={!this.store.canRedo}>\n              Redo\n            </button>\n            <button className=\"btn btn-control\"\n                    onClick={() => this.store.nextLevel()}>\n              Next Level\n            </button>\n          </div>\n          <p className=\"scoreText\">Crossouts: {this.store.crossoutsMade}</p>\n        </div>\n          <GameFieldComponent rows={this.store.rows}\n                              previousSelectedNumberRow={this.store.previousSelectedNumberRow}\n                              previousSelectedNumberCol={this.store.previousSelectedNumberCol}\n                              onCellClick={(row, col) => this.store.handleCellClick(row, col)}/>\n      </div>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (super.componentDidMount) {\n      super.componentDidMount();\n    }\n\n    // this.store.reset()\n\n    observe(this.store, 'crossoutsMade',  () => {\n      const scoreText = $('.scoreText');\n      if (scoreText.hasClass('animation2')) {\n        scoreText.addClass('animation1')\n        scoreText.removeClass('animation2')\n      } else {\n        scoreText.addClass('animation2')\n        scoreText.removeClass('animation1')\n      }\n    });\n  }\n\n  private get store() {\n    return this.props.gameStore!\n  }\n}\n\nexport default GameComponent;\n","import * as React from \"react\";\nimport {inject, observer, Provider} from \"mobx-react\";\nimport GameComponent from \"../components/GameComponent\";\nimport RootStore from \"../../router/stores/RootStore\";\n\ninterface GameContainerProps {\n  rootStore?: RootStore\n  match: {\n    params: {\n      radix: string\n      rowSize: string\n      seed?: string\n      initialSize: string\n    }\n  }\n}\n\n@inject('rootStore')\n@observer\nclass GameContainer extends React.Component<GameContainerProps> {\n  public render(): React.ReactNode {\n    return (\n      <Provider gameStore={this.gameStore}>\n        <GameComponent/>\n      </Provider>\n    )\n  }\n\n  public componentDidUpdate(prevProps: Readonly<GameContainerProps>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (super.componentDidUpdate) {\n      super.componentDidUpdate(prevProps, prevState, snapshot);\n    }\n    this.updateGameStoreToMatchUrl()\n  }\n\n  public componentDidMount() {\n    this.updateGameStoreToMatchUrl()\n  }\n\n  private updateGameStoreToMatchUrl() {\n    const { radix, rowSize, seed, initialSize } = this.props.match.params\n\n    this.gameStore.radix = parseInt(radix)\n    this.gameStore.rowSize = parseInt(rowSize)\n    this.gameStore.initialSize = parseInt(initialSize)\n    this.gameStore.seed = seed\n  }\n\n  private get gameStore() {\n    return this.props.rootStore!.gameStore\n  }\n}\n\nexport default GameContainer\n","import * as React from \"react\";\nimport {observer} from \"mobx-react\";\nimport {Link} from \"react-router-dom\";\n\nimport GameLinkFormStore from \"../stores/GameLinkFormStore\";\nimport GameField from \"../../GameField\";\n\ninterface GameLinkFormProps {\n  store: GameLinkFormStore\n}\n\n@observer\nexport default class GameLinkForm extends React.Component<GameLinkFormProps> {\n  public render(): React.ReactNode {\n    return (\n      <form className=\"d-flex flex-column\">\n        <div className=\"form-group row align-items-center m-0 flex-nowrap\">\n          <label className=\"col-4 text-nowrap small\" htmlFor=\"Radix\">Radix</label>\n          <div className=\"col mx-2 my-1\">\n            <input className=\"form-control-sm\" type=\"number\"\n                   id=\"Radix\" placeholder=\"Radix\" aria-label=\"Radix\"\n                   value={this.store.radix} min={GameField.RADIX_MIN} max={GameField.RADIX_MAX}\n                   onChange={this.handleRadixChange}/>\n          </div>\n        </div>\n        <div className=\"form-group row align-items-center m-0 flex-nowrap\">\n          <label className=\"col-4 text-nowrap small\" htmlFor=\"RowSize\">Row Size</label>\n          <div className=\"col mx-2 my-1\">\n            <input className=\"form-control-sm\" type=\"number\"\n                   id=\"RowSize\" placeholder=\"Row Size\" aria-label=\"Row Size\"\n                   value={this.store.rowSize} min={GameField.ROW_SIZE_MIN} max={GameField.ROW_SIZE_MAX}\n                   onChange={this.handleRowSizeChange}/>\n          </div>\n        </div>\n        <div className=\"form-group row align-items-center m-0 flex-nowrap\">\n          <label className=\"col-4 text-nowrap small\" htmlFor=\"InitialFieldSize\">Initial Field Size</label>\n          <div className=\"col mx-2 my-1\">\n            <input className=\"form-control-sm\" type=\"number\"\n                   id=\"InitialFieldSize\" placeholder=\"Initial Field Size\" aria-label=\"Initial Field Size\"\n                   value={this.store.initialSize} min={GameField.INITIAL_SIZE_MIN} max={GameField.INITIAL_SIZE_MAX}\n                   onChange={this.handleInitialSizeChange}/>\n          </div>\n        </div>\n        <div className=\"form-group row align-items-center m-0 flex-nowrap\">\n          <label className=\"col-4 text-nowrap small\" htmlFor=\"RandomSeed\">Random Seed</label>\n          <div className=\"col mx-2 my-1\">\n            <input className=\"form-control-sm\" type=\"text\"\n                   id=\"RandomSeed\" placeholder=\"Random Seed\" aria-label=\"Random Seed\"\n                   value={this.store.seed || \"\"}\n                   onChange={this.handleSeedChange}/>\n          </div>\n        </div>\n        <Link className=\"mx-sm-2 my-sm-1\" to={this.store.gameUrl}>\n          <input className=\"btn btn-light\" type=\"submit\" value=\"Generate\"/>\n        </Link>\n      </form>\n    )\n  }\n\n  private get store() {\n    return this.props.store\n  }\n\n  private handleRadixChange = (e: React.FormEvent) => {\n    const target = e.target as HTMLInputElement\n    this.store.radix = parseInt(target.value)\n  }\n\n  private handleRowSizeChange = (e: React.FormEvent) => {\n    const target = e.target as HTMLInputElement\n    this.store.rowSize = parseInt(target.value)\n  }\n\n  private handleInitialSizeChange = (e: React.FormEvent) => {\n    const target = e.target as HTMLInputElement\n    this.store.initialSize = parseInt(target.value)\n  }\n\n  private handleSeedChange = (e: React.FormEvent) => {\n    const target = e.target as HTMLInputElement\n    this.store.seed = target.value\n  }\n}\n","import * as React from \"react\";\nimport {BrowserRouter, Link, Route} from \"react-router-dom\";\nimport HomeComponent from \"../../home/components/HomeComponent\";\nimport RulesComponent from \"../../rules/components/RulesComponent\";\nimport {inject, observer} from \"mobx-react\";\nimport GameContainer from \"../../game/containers/GameContainer\";\nimport RouterStore from \"../stores/RouterStore\";\nimport GameLinkForm from \"../../game/link/components/GameLinkForm\";\n\ninterface RouterComponentProps {\n  routerStore?: RouterStore\n}\n\n@inject('routerStore')\n@observer\nclass RouterComponent extends React.Component<RouterComponentProps> {\n  public render(): React.ReactNode {\n    return (\n      <BrowserRouter basename=\"matrix\">\n        <div className='Index h-100'>\n          <nav className=\"navbar sticky-top navbar-expand-sm navbar-dark bg-dark\">\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#main-nav\"\n                    aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"/>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"main-nav\">\n              <nav className=\"container navbar-nav justify-content-start\">\n                <Link className=\"navbar-brand nav-item nav-link\" to=\"/\">Matrix</Link>\n                <div className=\"nav-item dropdown\">\n                  <a className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\" role=\"button\"\n                     aria-haspopup=\"true\" aria-expanded=\"false\">Play</a>\n                  <div className=\"dropdown-menu flex-column \">\n                    <Link className=\"dropdown-item\" to=\"/game/radix/10/row/9/size/27/\">Classic</Link>\n                    <div className=\"dropdown-divider\"/>\n                    <h6 className=\"mx-4\">Custom</h6>\n                    <GameLinkForm store={this.routerStore.gameLinkFormStore}/>\n                  </div>\n                </div>\n                <Link className=\"nav-item nav-link\" to=\"/rules/\">Rules</Link>\n              </nav>\n            </div>\n          </nav>\n          <div role=\"main\" className=\"container\">\n            <Route path=\"/\" exact component={HomeComponent}/>\n            <Route path=\"/rules/\" exact component={RulesComponent}/>\n            <Route path={\"/game/radix/:radix([4-9]|[1-2]\\\\d|3[0-2])\" +\n                              \"/row/:rowSize([3-9]|[1-2]\\\\d|3[0-2])\" +\n                              \"/size/:initialSize([1-9]\\\\d?)\" +\n                              \"/(seed/)?:seed?/\"}\n                   component={GameContainer}/>\n          </div>\n        </div>\n      </BrowserRouter>\n    )\n  }\n\n  private get routerStore() {\n    return this.props.routerStore!\n  }\n}\n\nexport default RouterComponent\n","import * as React from \"react\";\nimport RootStore from \"../stores/RootStore\";\nimport RouterComponent from \"../components/RouterComponent\";\nimport {inject, Provider} from \"mobx-react\";\n\ninterface RouterContainerProps {\n  rootStore?: RootStore\n}\n\n@inject('rootStore')\nexport default class RouterContainer extends React.Component<RouterContainerProps> {\n  public render(): React.ReactNode {\n    const { routerStore } = this.props.rootStore!\n    return (\n      <Provider routerStore={routerStore}>\n        <RouterComponent/>\n      </Provider>\n    )\n  }\n}\n","import \"bootstrap/js/src/index\"\nimport \"bootstrap/js/src/util\"\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {Provider} from \"mobx-react\";\n\nimport './styles/styles.sass';\nimport RootStore from \"./modules/router/stores/RootStore\";\nimport RouterContainer from \"./modules/router/containers/RouterContainer\";\n\nconst root = document.getElementById('root');\n\nconst rootElement = (\n  <Provider rootStore={new RootStore()}>\n    <RouterContainer/>\n  </Provider>\n);\n\nReactDOM.render(rootElement, root);\n// registerServiceWorker();\n"],"sourceRoot":""}